# -*- coding: utf-8 -*-
"""ques2Part1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CUM3fpCz6YABe2MjuvUE14gF1PeQVKni
"""

#importing all the libraries to be used 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
uploaded=files.upload()

#load the data file here 
df=pd.read_csv('A2Q1.csv',header=None)
df=df.to_numpy()
n=df.shape[0]
m=df.shape[1]

#pick any k random data point and call them as cluster
import random
def randomCentroids(k):
  centroids=[]
  for i in range(k):
    index=random.randint(0,n)
    centroids.append(df[index,:])
  return centroids

def calculateDistance(x,y):
  #these x and y are supposed to be m dimensional vectors
  dist=0;
  for i in range(len(x)):
    diff=x[i]-y[i]
    diff=diff*diff
    dist=dist+diff
  return dist

#we need to assign for the first time data point to each cluster
def assign(centroids,k):
  z=[]
  for i in range(n):
    x=df[i,:]
    temp_dist=[]
    for j in range(k):
      y=centroids[j]
      dist=calculateDistance(x,y)
      temp_dist.append(dist)
    index=np.argmin(temp_dist)
    z.append(index)
  return z

def calculateMean(z,centroids,k):
  #we have to calulate mean for all 4 clusters i.e meu
  meu=[]
  for i in range(k):
    sum=[]
    num=0;
    for j in range(n):
      if z[j]==i:
        num=num+1
        sum.append(df[j,:])
    meu.append(np.mean(sum,axis=0))
  return meu
#this will return all the meu

#i have all the basic functionality now
def reassign(z,meu,k):
  #meu contains all the means of the clusters
  #check all points if they want to switch their means
  flag=False
  znew=[]
  for i in range(n):
    znew.append(z[i])
  for i in range(n):
    #for every point
    ownDist=calculateDistance(df[i,:],meu[z[i]])
    ownClus=z[i]
    for j in range(k):
      nextDist=calculateDistance(df[i,:],meu[j])
      if nextDist<ownDist:
        ownDist=nextDist
        ownClus=j
        flag=True
    znew[i]=ownClus
  return (flag,znew)

def computeErrors(meu,z):
  #we know the mean matrix and the point assignment, compute the error
  error=0
  for i in range(n):
    error=error+calculateDistance(df[i,:],meu[z[i]])
  return error

def llyod(k):
  err=[]
  clusters=randomCentroids(k)
  z=assign(clusters,k)
  meu=calculateMean(z,clusters,k)
  e=0
  e=e+computeErrors(meu,z)
  err.append(e)
  r,znew=reassign(z,meu,k)
  z=np.copy(znew)
  #print(z)
  meu=calculateMean(z,clusters,k)
  e=0
  e=e+computeErrors(meu,z)
  err.append(e)
  count=0
  while r:
    r,znew=reassign(z,meu,k)
    z=np.copy(znew)
    meu=calculateMean(z,clusters,k)
    e=0
    e=e+computeErrors(meu,z)
    err.append(e)
    count=count+1
  x_axis=[]
  for i in range(count+2):
    x_axis.append(i)
  #vornoi regions
  #plot the errors over the iterations 
  plt.plot(x_axis,err)
  plt.xlabel("Iteration Number")
  plt.ylabel("Error")
  plt.title("Error Plot")
  plt.show()


llyod(4)

