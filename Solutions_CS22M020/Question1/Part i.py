# -*- coding: utf-8 -*-
"""EMPart1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DxwrUcLsjlF0-YsmdYLlZxkGnzQ54Tkh
"""

#importing all the libraries to be used 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
uploaded=files.upload()

#load the data file here 
df=pd.read_csv('A2Q1.csv',header=None)
df=df.to_numpy()
n=df.shape[0]
m=df.shape[1]

#pick any k random data point and call them as cluster
import random
def randomCentroids(k):
  centroids=[]
  for i in range(k):
    index=random.randint(0,n-1)
    centroids.append(df[index,:])
  return centroids

def calculateDistance(x,y):
  #these x and y are supposed to be m dimensional vectors
  dist=0;
  for i in range(len(x)):
    diff=x[i]-y[i]
    diff=diff*diff
    dist=dist+diff
  return dist

#we need to assign for the first time data point to each cluster
def assign(centroids,k):
  z=[]
  for i in range(n):
    x=df[i,:]
    temp_dist=[]
    for j in range(k):
      y=centroids[j]
      dist=calculateDistance(x,y)
      temp_dist.append(dist)
    index=np.argmin(temp_dist)
    z.append(index)
  return z

def calculateMean(z,centroids,k):
  #we have to calulate mean for all 4 clusters i.e meu
  meu=[]
  for i in range(k):
    sum=[]
    num=0;
    for j in range(n):
      if z[j]==i:
        num=num+1
        sum.append(df[j,:])
    meu.append(np.mean(sum,axis=0))
  return meu
#this will return all the meu

#i have all the basic functionality now
def reassign(z,meu,k):
  #meu contains all the means of the clusters
  #check all points if they want to switch their means
  flag=False
  znew=[]
  for i in range(n):
    znew.append(z[i])
  for i in range(n):
    #for every point
    ownDist=calculateDistance(df[i,:],meu[z[i]])
    ownClus=z[i]
    for j in range(k):
      nextDist=calculateDistance(df[i,:],meu[j])
      if nextDist<ownDist:
        ownDist=nextDist
        ownClus=j
        flag=True
    znew[i]=ownClus
  return (flag,znew)

def computeErrors(meu,z):
  #we know the mean matrix and the point assignment, compute the error
  error=0
  for i in range(n):
    error=error+calculateDistance(df[i,:],meu[z[i]])
  return error

def llyod(k,num):
  err=[]
  clusters=randomCentroids(k)
  z=assign(clusters,k)
  meu=calculateMean(z,clusters,k)
  e=0
  e=e+computeErrors(meu,z)
  err.append(e)
  r,znew=reassign(z,meu,k)
  z=np.copy(znew)
  #print(z)
  meu=calculateMean(z,clusters,k)
  e=0
  e=e+computeErrors(meu,z)
  err.append(e)
  count=0
  while r:
    r,znew=reassign(z,meu,k)
    z=np.copy(znew)
    meu=calculateMean(z,clusters,k)
    e=0
    e=e+computeErrors(meu,z)
    err.append(e)
    count=count+1
  return (meu,z)

def countPoints(z):
  freq=np.zeros(4)
  for i in range(len(z)):
    freq[z[i]]=freq[z[i]]+1
  return freq

def countO():
  o=np.zeros(400)
  for i in range(400):
    o[i]=np.sum(df[i,:])
  return o

def calculateLambda(p,pi,o):
  l=np.zeros((400,4))
  for i in range(400):
    deno=0
    for j in range(4):
      deno=deno+pi[j]*np.power(p[j],o[i])*np.power(1-p[j],50-o[i])
    for k in range(4):
      num=pi[k]*np.power(p[k],o[i])*np.power(1-p[k],50-o[i])
      l[i][k]=num/deno
  return l

def calculatePI(l):
  pi=np.sum(l,axis=0)/400
  return pi

def calculateP(l,o):
  p=np.zeros(4)
  deno=np.sum(l,axis=0)
  for k in range(4):
    for i in range(400):
      p[k]=p[k]+l[i][k]*(o[i]/50)
    p[k]=p[k]/deno[k]
  return p

def logLike(pi,p,o):
  ll=0
  for i in range(400):
    val=0
    for k in range(4):
      val=val+pi[k]*np.power(p[k],o[i])*np.power(1-p[k],50-o[i])
    ll=ll+np.log(val)
  return ll

def runEM(p,pi,o):
  logLikeList=[]
  p_old=p
  pi_old=pi
  l_old=None
  o_old=o
  while True:
    l_new=calculateLambda(p_old,pi_old,o_old)
    pi_new=calculatePI(l_new)
    p_new=calculateP(l_new,o)
    ll_new=logLike(pi_old,p_old,o_old)
    logLikeList.append(ll_new)
    if np.sum(np.abs(pi_old-pi_new))<=0.00000001 and np.sum(np.abs(p_old-p_new))<=0.00000001:
      break
    p_old=p_new
    pi_old=pi_new
    #l_old=l_new
  return logLikeList

# we have meu and z
def initializeEM():
  meu,z=llyod(4,1)
  meu=np.array(meu)
  meu=meu.T
  p=np.sum(meu,axis=1)
  p=p/50
  pi=countPoints(z)/400
  o=countO()
  l=calculateLambda(p,pi,o)
  return (p,pi,l)

def control():
  p,pi,l=initializeEM()
  o=countO()
  return runEM(p,pi,o)

ans=[]
for i in range(100):
  ans.append(control())
print(ans)

max=0
for i in range(100):
    if(len(ans[i])>max):
        max=len(ans[i])
for i in range(100):
    ele=ans[i][len(ans[i])-1]
    for j in range(max-len(ans[i])):
        ans[i].append(ele)
final_likelihood=[]
for j in range(max):
    sum=0
    for i in range(100):
        sum+=ans[i][j]
    final_likelihood.append(sum/100)
iteration=[]
for i in range(max):
    iteration.append(i)

#plotting error w.r.t. iterations 
f2=plt.figure(1)
plt.xlabel('X-axis --Iterations',color='black')
plt.ylabel('Y-axis --Maximum Likelihood',color='black')
plt.title('Maximum Likelihood w.r.t. Iterations',color='black')
plt.plot(iteration,final_likelihood) 
plt.grid()
plt.show()

