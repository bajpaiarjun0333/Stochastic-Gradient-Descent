# -*- coding: utf-8 -*-
"""AnalyticalWML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qL8yiHLQIRGR4qIm1zHWLGIUVCF5eDXD
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

from google.colab import files
uploaded=files.upload()

def loadData():
  df=pd.read_csv("Dataset.csv",header=None)
  df=df.to_numpy()
  x=df[:,0:100]
  y=df[:,100]
  n=x.shape[0]
  d=x.shape[1]
  return (x,y,n,d)
#unit testing
#x,y,n,d=loadData()
#print(x.shape)
#print(y.shape)
#print(d)
#print(n)

#Question 2 part i
#Analytical solution for wml
def computeWML(x,y):
  w_ml=np.matmul(x.T,x)
  w_ml=np.linalg.inv(w_ml)
  w_ml=np.matmul(w_ml,x.T)
  w_ml=np.matmul(w_ml,y)
  return w_ml

#driver function 
def main():
  x,y,n,d=loadData()
  w_ml=computeWML(x,y)
  print("W after maximum likelihood estimation without data centering or normalization")
  print(w_ml)

main()

